{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { readAsStringAsync } from 'expo-file-system';\nimport THREE from \"../Three\";\nexport default function readFromFileSystemAsStringAsync(localUri) {\n  var loader, message;\n  return _regeneratorRuntime.async(function readFromFileSystemAsStringAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (global.__expo_three_log_loading) {\n            console.time('loadAsset');\n          }\n\n          if (!(Platform.OS === 'web')) {\n            _context2.next = 4;\n            break;\n          }\n\n          loader = new THREE.FileLoader();\n          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n            return loader.load(localUri, function _callee(value) {\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.t0 = resolve;\n                      _context.next = 3;\n                      return _regeneratorRuntime.awrap(value);\n\n                    case 3:\n                      _context.t1 = _context.sent;\n                      (0, _context.t0)(_context.t1);\n\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }, function () {}, reject);\n          }));\n\n        case 4:\n          _context2.prev = 4;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(readAsStringAsync(localUri));\n\n        case 7:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](4);\n          message = _context2.t0.message;\n          throw new Error(\"ExpoTHREE: FileSystem.readAsStringAsync(\" + localUri + \") \" + message);\n\n        case 14:\n          _context2.prev = 14;\n\n          if (global.__expo_three_log_loading) {\n            console.timeEnd('loadAsset');\n          }\n\n          return _context2.finish(14);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[4, 10, 14, 17]], Promise);\n}","map":{"version":3,"sources":["../../src/loaders/readAsStringAsync.ts"],"names":[],"mappings":";;AACA,SAAS,iBAAT,QAAkC,kBAAlC;AAEA,OAAO,KAAP;AAIA,eAAe,SAAe,+BAAf,CACb,QADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAGb,cAAI,MAAM,CAAC,wBAAX,EAAqC;AACnC,YAAA,OAAO,CAAC,IAAR,CAAa,WAAb;AACD;;AALY,gBAOT,QAAQ,CAAC,EAAT,KAAgB,KAPP;AAAA;AAAA;AAAA;;AAQL,UAAA,MARK,GAQI,IAAI,KAAK,CAAC,UAAV,EARJ;AAAA,4CASJ,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV;AAAA,mBACjB,MAAM,CAAC,IAAP,CACE,QADF,EAEE,iBAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA,oCAEE,OAFF;AAAA;AAAA,uDAEgB,KAFhB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,EAME,YAAK,CAAG,CANV,EAOE,MAPF,CADiB;AAAA,WAAZ,CATI;;AAAA;AAAA;AAAA;AAAA,2CAsBE,iBAAiB,CAAC,QAAD,CAtBnB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuBF,UAAA,OAvBE,gBAuBF,OAvBE;AAAA,gBAwBL,IAAI,KAAJ,8CACuC,QADvC,UACoD,OADpD,CAxBK;;AAAA;AAAA;;AA4BX,cAAI,MAAM,CAAC,wBAAX,EAAqC;AACnC,YAAA,OAAO,CAAC,OAAR,CAAgB,WAAhB;AACD;;AA9BU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Platform } from 'react-native';\nimport { readAsStringAsync } from 'expo-file-system';\n\nimport THREE from '../Three';\n\ndeclare var global: any;\n\nexport default async function readFromFileSystemAsStringAsync(\n  localUri: string\n): Promise<string | null> {\n  if (global.__expo_three_log_loading) {\n    console.time('loadAsset');\n  }\n\n  if (Platform.OS === 'web') {\n    const loader = new THREE.FileLoader();\n    return new Promise((resolve, reject) =>\n      loader.load(\n        localUri,\n        async value => {\n          // @ts-ignore\n          resolve(await value);\n        },\n        () => {},\n        reject\n      )\n    );\n  }\n  try {\n    return await readAsStringAsync(localUri);\n  } catch ({ message }) {\n    throw new Error(\n      `ExpoTHREE: FileSystem.readAsStringAsync(${localUri}) ${message}`\n    );\n  } finally {\n    if (global.__expo_three_log_loading) {\n      console.timeEnd('loadAsset');\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}