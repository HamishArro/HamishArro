{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { resolveAsync } from 'expo-asset-utils';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport THREE from \"./Three\";\n\nvar ExpoTextureLoader = function (_THREE$TextureLoader) {\n  _inherits(ExpoTextureLoader, _THREE$TextureLoader);\n\n  var _super = _createSuper(ExpoTextureLoader);\n\n  function ExpoTextureLoader() {\n    _classCallCheck(this, ExpoTextureLoader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExpoTextureLoader, [{\n    key: \"load\",\n    value: function load(asset, onLoad, onProgress, onError) {\n      if (!asset) {\n        throw new Error('ExpoTHREE.TextureLoader.load(): Cannot parse a null asset');\n      }\n\n      var texture = new THREE.Texture();\n      var loader = new THREE.ImageLoader(this.manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      loader.setPath(this.path);\n\n      (function _callee() {\n        var nativeAsset, parseAsset;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                parseAsset = function _parseAsset(image) {\n                  texture.image = image;\n                  texture.needsUpdate = true;\n\n                  if (onLoad !== undefined) {\n                    onLoad(texture);\n                  }\n                };\n\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(resolveAsync(asset));\n\n              case 3:\n                nativeAsset = _context.sent;\n\n                if (Platform.OS === 'web') {\n                  loader.load(nativeAsset.localUri, function (image) {\n                    parseAsset(image);\n                  }, onProgress, onError);\n                } else {\n                  texture['isDataTexture'] = true;\n                  parseAsset({\n                    data: nativeAsset,\n                    width: nativeAsset.width,\n                    height: nativeAsset.height\n                  });\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n\n      return texture;\n    }\n  }]);\n\n  return ExpoTextureLoader;\n}(THREE.TextureLoader);\n\nexport { ExpoTextureLoader as default };","map":{"version":3,"sources":["../src/TextureLoader.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,SAAS,YAAT,QAA6B,kBAA7B;;AAEA,OAAO,KAAP;;IAEqB,iB;;;;;;;;;;;;;WACnB,cACE,KADF,EAEE,MAFF,EAGE,UAHF,EAIE,OAJF,EAIuC;AAErC,UAAI,CAAC,KAAL,EAAY;AACV,cAAM,IAAI,KAAJ,CACJ,2DADI,CAAN;AAGD;;AAED,UAAI,OAAO,GAAG,IAAI,KAAK,CAAC,OAAV,EAAd;AAEA,UAAM,MAAM,GAAG,IAAI,KAAK,CAAC,WAAV,CAAsB,KAAK,OAA3B,CAAf;AACA,MAAA,MAAM,CAAC,cAAP,CAAsB,KAAK,WAA3B;AACA,MAAA,MAAM,CAAC,OAAP,CAAe,KAAK,IAApB;;AAEA,OAAC;AAAA,yBAGU,UAHV;AAAA;AAAA;AAAA;AAAA;AAGU,gBAAA,UAHV,wBAGqB,KAHrB,EAG0B;AACvB,kBAAA,OAAO,CAAC,KAAR,GAAgB,KAAhB;AACA,kBAAA,OAAO,CAAC,WAAR,GAAsB,IAAtB;;AAEA,sBAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,oBAAA,MAAM,CAAC,OAAD,CAAN;AACD;AACF,iBAVF;;AAAA;AAAA,iDAC2B,YAAY,CAAC,KAAD,CADvC;;AAAA;AACO,gBAAA,WADP;;AAYC,oBAAI,QAAQ,CAAC,EAAT,KAAgB,KAApB,EAA2B;AACzB,kBAAA,MAAM,CAAC,IAAP,CACE,WAAW,CAAC,QADd,EAEE,UAAA,KAAK,EAAG;AACN,oBAAA,UAAU,CAAC,KAAD,CAAV;AACD,mBAJH,EAKE,UALF,EAME,OANF;AAQD,iBATD,MASO;AACL,kBAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,IAA3B;AAEA,kBAAA,UAAU,CAAC;AACT,oBAAA,IAAI,EAAE,WADG;AAET,oBAAA,KAAK,EAAE,WAAW,CAAC,KAFV;AAGT,oBAAA,MAAM,EAAE,WAAW,CAAC;AAHX,mBAAD,CAAV;AAKD;;AA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAgCA,aAAO,OAAP;AACD;;;;EApD4C,KAAK,CAAC,a;;SAAhC,iB","sourcesContent":["import { resolveAsync } from 'expo-asset-utils';\nimport { Platform } from 'react-native';\nimport THREE from './Three';\n\nexport default class ExpoTextureLoader extends THREE.TextureLoader {\n  load(\n    asset: any,\n    onLoad?: (texture: THREE.Texture) => void,\n    onProgress?: (event: ProgressEvent) => void,\n    onError?: (event: ErrorEvent) => void\n  ): THREE.Texture {\n    if (!asset) {\n      throw new Error(\n        'ExpoTHREE.TextureLoader.load(): Cannot parse a null asset'\n      );\n    }\n\n    let texture = new THREE.Texture();\n\n    const loader = new THREE.ImageLoader(this.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setPath(this.path);\n\n    (async () => {\n      const nativeAsset = await resolveAsync(asset);\n\n      function parseAsset(image) {\n        texture.image = image;\n        texture.needsUpdate = true;\n\n        if (onLoad !== undefined) {\n          onLoad(texture);\n        }\n      }\n\n      if (Platform.OS === 'web') {\n        loader.load(\n          nativeAsset.localUri!,\n          image => {\n            parseAsset(image);\n          },\n          onProgress,\n          onError\n        );\n      } else {\n        texture['isDataTexture'] = true; // Forces passing to `gl.texImage2D(...)` verbatim\n\n        parseAsset({\n          data: nativeAsset,\n          width: nativeAsset.width,\n          height: nativeAsset.height,\n        });\n      }\n    })();\n\n    return texture;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}