{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport THREE from \"./Three\";\nimport loadAsync from \"./loadAsync\";\nimport parseAssetCallback from \"./loaders/parseAssetCallback\";\n\nvar CubeTexture = function (_THREE$CubeTexture) {\n  _inherits(CubeTexture, _THREE$CubeTexture);\n\n  var _super = _createSuper(CubeTexture);\n\n  function CubeTexture() {\n    var _this;\n\n    _classCallCheck(this, CubeTexture);\n\n    _this = _super.apply(this, arguments);\n\n    _this.loadAsync = function _callee(options) {\n      var nextDirections, _iterator, _step, direction, asset, texture;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              nextDirections = options.directions || CubeTexture.format.coord_s;\n              _iterator = _createForOfIteratorHelperLoose(nextDirections);\n\n            case 2:\n              if ((_step = _iterator()).done) {\n                _context.next = 13;\n                break;\n              }\n\n              direction = _step.value;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(parseAssetCallback(direction, options.assetForDirection));\n\n            case 6:\n              asset = _context.sent;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(loadAsync(asset));\n\n            case 9:\n              texture = _context.sent;\n\n              _this.images.push(texture);\n\n            case 11:\n              _context.next = 2;\n              break;\n\n            case 13:\n              _this.needsUpdate = true;\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  return CubeTexture;\n}(THREE.CubeTexture);\n\nexport { CubeTexture as default };\nCubeTexture.format = {\n  direct_s: ['lf', 'rt', 'up', 'dn', 'ft', 'bk'],\n  coord_s: ['px', 'nx', 'py', 'ny', 'pz', 'nz'],\n  coord_m: ['xpos', 'xneg', 'ypos', 'yneg', 'zpos', 'zneg']\n};","map":{"version":3,"sources":["../src/CubeTexture.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAP;AACA,OAAO,SAAP;AACA,OAAO,kBAAP;;IAKqB,W;;;;;AAArB,yBAAA;AAAA;;AAAA;;;;AAME,UAAA,SAAA,GAAY,iBAAO,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAIJ,cAAA,cAJI,GAIa,OAAO,CAAC,UAAR,IAAsB,WAAW,CAAC,MAAZ,CAAmB,OAJtD;AAAA,0DAMY,cANZ;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMD,cAAA,SANC;AAAA;AAAA,+CAOY,kBAAkB,CACpC,SADoC,EAEpC,OAAO,CAAC,iBAF4B,CAP9B;;AAAA;AAOF,cAAA,KAPE;AAAA;AAAA,+CAWc,SAAS,CAAC,KAAD,CAXvB;;AAAA;AAWF,cAAA,OAXE;;AAYR,oBAAK,MAAL,CAAY,IAAZ,CAAiB,OAAjB;;AAZQ;AAAA;AAAA;;AAAA;AAcV,oBAAK,WAAL,GAAmB,IAAnB;;AAdU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AANF;AAsBC;;;EAtBwC,KAAK,CAAC,W;;SAA1B,W;AACZ,WAAA,CAAA,MAAA,GAAS;AACd,EAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CADI;AAEd,EAAA,OAAO,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CAFK;AAGd,EAAA,OAAO,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,MAAzC;AAHK,CAAT","sourcesContent":["import THREE from './Three';\nimport loadAsync from './loadAsync';\nimport parseAssetCallback from './loaders/parseAssetCallback';\n\ntype AnyFunction = (...args: any[]) => any;\ntype AnyObject = { [key: string]: any };\ntype ObjectOrFunction = AnyObject | AnyFunction;\nexport default class CubeTexture extends THREE.CubeTexture {\n  static format = {\n    direct_s: ['lf', 'rt', 'up', 'dn', 'ft', 'bk'],\n    coord_s: ['px', 'nx', 'py', 'ny', 'pz', 'nz'],\n    coord_m: ['xpos', 'xneg', 'ypos', 'yneg', 'zpos', 'zneg'],\n  };\n  loadAsync = async (options: {\n    assetForDirection: ObjectOrFunction;\n    directions?: string[];\n  }) => {\n    const nextDirections = options.directions || CubeTexture.format.coord_s;\n\n    for (let direction of nextDirections) {\n      const asset = await parseAssetCallback(\n        direction,\n        options.assetForDirection\n      );\n      const texture = await loadAsync(asset);\n      this.images.push(texture);\n    }\n    this.needsUpdate = true;\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}