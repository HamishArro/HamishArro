{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { resolveAsync } from 'expo-asset-utils';\nimport resolveAsset, { stringFromAsset } from \"./resolveAsset\";\nimport { loadDaeAsync, loadObjAsync, loadMtlAsync, loadArrayBufferAsync } from \"./loaders/loadModelsAsync\";\nimport \"./polyfillTextureLoader.fx\";\nimport { loadTextureAsync } from \"./loaders/loadTextureAsync\";\nimport { loaderClassForExtension, loaderClassForUri } from \"./loaderClassForExtension\";\nexport function loadBasicModelAsync(options) {\n  var uri, onProgress, onAssetRequested, loader, LoaderClass, _loader;\n\n  return _regeneratorRuntime.async(function loadBasicModelAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          uri = options.uri, onProgress = options.onProgress, onAssetRequested = options.onAssetRequested, loader = options.loader, LoaderClass = options.LoaderClass;\n          _loader = loader || new LoaderClass();\n\n          if (_loader.setPath) {\n            _loader.setPath(onAssetRequested);\n          }\n\n          return _context.abrupt(\"return\", new Promise(function (res, rej) {\n            return _loader.load(uri, res, onProgress, rej);\n          }));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport default function loadAsync(res, onProgress) {\n  var onAssetRequested,\n      urls,\n      asset,\n      url,\n      arrayBuffer,\n      GLTFLoader,\n      loader,\n      LoaderClass,\n      urlB,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function loadAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          onAssetRequested = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : function () {};\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(resolveAsset(res));\n\n        case 3:\n          urls = _context2.sent;\n\n          if (urls) {\n            _context2.next = 6;\n            break;\n          }\n\n          throw new Error(\"ExpoTHREE.loadAsync: Cannot parse undefined assets. Please pass valid resources for: \" + res + \".\");\n\n        case 6:\n          asset = urls[0];\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(resolveAsync(asset));\n\n        case 9:\n          url = _context2.sent.localUri;\n\n          if (!(url == null)) {\n            _context2.next = 12;\n            break;\n          }\n\n          throw new Error(\"ExpoTHREE.loadAsync: this asset couldn't be downloaded. Be sure that your app.json contains the correct extensions.\");\n\n        case 12:\n          if (!(urls.length === 1)) {\n            _context2.next = 46;\n            break;\n          }\n\n          if (!url.match(/\\.(jpeg|jpg|gif|png)$/)) {\n            _context2.next = 17;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", loadTextureAsync({\n            asset: asset\n          }));\n\n        case 17:\n          if (!url.match(/\\.dae$/i)) {\n            _context2.next = 21;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", loadDaeAsync({\n            asset: url,\n            onProgress: onProgress,\n            onAssetRequested: onAssetRequested\n          }));\n\n        case 21:\n          if (!url.match(/\\.(glb|gltf)$/i)) {\n            _context2.next = 30;\n            break;\n          }\n\n          _context2.next = 24;\n          return _regeneratorRuntime.awrap(loadArrayBufferAsync({\n            uri: url,\n            onProgress: onProgress\n          }));\n\n        case 24:\n          arrayBuffer = _context2.sent;\n          GLTFLoader = loaderClassForExtension('gltf');\n          loader = new GLTFLoader();\n          return _context2.abrupt(\"return\", new Promise(function (res, rej) {\n            return loader.parse(arrayBuffer, onAssetRequested, res, rej);\n          }));\n\n        case 30:\n          if (!url.match(/\\.json$/i)) {\n            _context2.next = 34;\n            break;\n          }\n\n          throw new Error('loadAsync: Please use ExpoTHREE.parseAsync({json}) instead, json can be loaded in lots of different ways.');\n\n        case 34:\n          if (!url.match(/\\.obj$/i)) {\n            _context2.next = 38;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", loadObjAsync({\n            asset: url,\n            onAssetRequested: onAssetRequested\n          }));\n\n        case 38:\n          if (!url.match(/\\.mtl$/i)) {\n            _context2.next = 42;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", loadMtlAsync({\n            asset: url,\n            onAssetRequested: onAssetRequested\n          }));\n\n        case 42:\n          LoaderClass = loaderClassForUri(url);\n          return _context2.abrupt(\"return\", loadBasicModelAsync({\n            uri: url,\n            onProgress: onProgress,\n            onAssetRequested: onAssetRequested,\n            LoaderClass: LoaderClass\n          }));\n\n        case 44:\n          _context2.next = 61;\n          break;\n\n        case 46:\n          if (!(urls.length === 2)) {\n            _context2.next = 60;\n            break;\n          }\n\n          _context2.next = 49;\n          return _regeneratorRuntime.awrap(stringFromAsset(urls[1]));\n\n        case 49:\n          urlB = _context2.sent;\n\n          if (!(urlB != null)) {\n            _context2.next = 57;\n            break;\n          }\n\n          if (!(url.match(/\\.mtl$/i) && urlB.match(/\\.obj$/i))) {\n            _context2.next = 55;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", loadObjAsync({\n            asset: urlB,\n            mtlAsset: url,\n            onAssetRequested: onAssetRequested\n          }));\n\n        case 55:\n          if (!(url.match(/\\.obj$/i) && urlB.match(/\\.mtl$/i))) {\n            _context2.next = 57;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", loadObjAsync({\n            asset: url,\n            mtlAsset: urlB,\n            onAssetRequested: onAssetRequested\n          }));\n\n        case 57:\n          throw new Error('Unrecognized File Type: ' + url);\n\n        case 60:\n          throw new Error('Too many arguments passed: ' + urls);\n\n        case 61:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/loadAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolveAsync } from 'expo-asset-utils';\nimport resolveAsset, { stringFromAsset } from './resolveAsset';\nimport { ProgressCallback } from './loading.types';\nimport { loadTexture } from './loadTexture';\nimport {\n  loadDaeAsync,\n  loadObjAsync,\n  loadMtlAsync,\n  loadArrayBufferAsync,\n} from './loaders/loadModelsAsync';\nimport './polyfillTextureLoader.fx';\n\nimport { loadTextureAsync } from './loaders/loadTextureAsync';\nimport {\n  loaderClassForExtension,\n  loaderClassForUri,\n} from './loaderClassForExtension';\n\nexport async function loadBasicModelAsync(options: {\n  uri: string;\n  onProgress?: ProgressCallback;\n  onAssetRequested: any;\n  loader?: any;\n  LoaderClass: any;\n}) {\n  const { uri, onProgress, onAssetRequested, loader, LoaderClass } = options;\n  const _loader = loader || new LoaderClass();\n  if (_loader.setPath) {\n    _loader.setPath(onAssetRequested);\n  }\n  return new Promise((res, rej) => _loader.load(uri, res, onProgress, rej));\n}\n\nexport default async function loadAsync(\n  res,\n  onProgress?: ProgressCallback,\n  onAssetRequested = function() {}\n) {\n  let urls = await resolveAsset(res);\n  if (!urls) {\n    throw new Error(\n      `ExpoTHREE.loadAsync: Cannot parse undefined assets. Please pass valid resources for: ${res}.`\n    );\n  }\n  const asset = urls[0];\n  let url: string | null = (await resolveAsync(asset)).localUri;\n\n  if (url == null) {\n    throw new Error(\n      `ExpoTHREE.loadAsync: this asset couldn't be downloaded. Be sure that your app.json contains the correct extensions.`\n    );\n  }\n\n  if (urls.length === 1) {\n    if (url.match(/\\.(jpeg|jpg|gif|png)$/)) {\n      return loadTextureAsync({ asset });\n    } else if (url.match(/\\.dae$/i)) {\n      return loadDaeAsync({\n        asset: url,\n        onProgress,\n        onAssetRequested,\n      });\n    } else if (url.match(/\\.(glb|gltf)$/i)) {\n      const arrayBuffer = await loadArrayBufferAsync({ uri: url, onProgress });\n      const GLTFLoader = loaderClassForExtension('gltf');\n      const loader = new GLTFLoader();\n      return new Promise((res, rej) =>\n        loader.parse(arrayBuffer, onAssetRequested, res, rej)\n      );\n    } else if (url.match(/\\.json$/i)) {\n      throw new Error(\n        'loadAsync: Please use ExpoTHREE.parseAsync({json}) instead, json can be loaded in lots of different ways.'\n      );\n    } else if (url.match(/\\.obj$/i)) {\n      return loadObjAsync({ asset: url, onAssetRequested });\n    } else if (url.match(/\\.mtl$/i)) {\n      return loadMtlAsync({ asset: url, onAssetRequested });\n    } else {\n      const LoaderClass = loaderClassForUri(url);\n      return loadBasicModelAsync({\n        uri: url,\n        onProgress,\n        onAssetRequested,\n        LoaderClass,\n      });\n    }\n  } else if (urls.length === 2) {\n    let urlB = await stringFromAsset(urls[1]);\n    if (urlB != null) {\n      if (url.match(/\\.mtl$/i) && urlB.match(/\\.obj$/i)) {\n        return loadObjAsync({\n          asset: urlB,\n          mtlAsset: url,\n          onAssetRequested,\n        });\n      } else if (url.match(/\\.obj$/i) && urlB.match(/\\.mtl$/i)) {\n        return loadObjAsync({\n          asset: url,\n          mtlAsset: urlB,\n          onAssetRequested,\n        });\n      }\n    }\n\n    throw new Error('Unrecognized File Type: ' + url);\n  } else {\n    throw new Error('Too many arguments passed: ' + urls);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}