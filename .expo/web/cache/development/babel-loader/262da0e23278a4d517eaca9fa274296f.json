{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EncodingType, readAsStringAsync } from 'expo-file-system';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { resolveAsync } from \"./resolveAsync\";\n\nfunction getSizeAsync(uri) {\n  return new Promise(function (resolve, reject) {\n    return Image.getSize(uri, function (width, height) {\n      return resolve({\n        width: width,\n        height: height\n      });\n    }, reject);\n  });\n}\n\nexport function base64forImageUriAsync(file) {\n  var asset, size, data;\n  return _regeneratorRuntime.async(function base64forImageUriAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(resolveAsync(file));\n\n        case 2:\n          asset = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(getSizeAsync(asset.localUri));\n\n        case 5:\n          size = _context.sent;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(readAsStringAsync(asset.localUri, {\n            encoding: EncodingType.Base64\n          }));\n\n        case 8:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data,\n            size: size\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/base64forImageUriAsync.ts"],"names":[],"mappings":";AAAA,SAAS,YAAT,EAAuB,iBAAvB,QAAgD,kBAAhD;;AAEA,SAAS,YAAT;;AAEA,SAAS,YAAT,CAAsB,GAAtB,EAAiC;AAC/B,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV;AAAA,WACjB,KAAK,CAAC,OAAN,CAAc,GAAd,EAAmB,UAAC,KAAD,EAAQ,MAAR;AAAA,aAAmB,OAAO,CAAC;AAAE,QAAA,KAAK,EAAL,KAAF;AAAS,QAAA,MAAM,EAAN;AAAT,OAAD,CAA1B;AAAA,KAAnB,EAAkE,MAAlE,CADiB;AAAA,GAAZ,CAAP;AAGD;;AAED,OAAO,SAAe,sBAAf,CACL,IADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CASe,YAAY,CAAC,IAAD,CAT3B;;AAAA;AASC,UAAA,KATD;AAAA;AAAA,2CAUc,YAAY,CAAC,KAAK,CAAC,QAAP,CAV1B;;AAAA;AAUC,UAAA,IAVD;AAAA;AAAA,2CAWc,iBAAiB,CAAC,KAAK,CAAC,QAAP,EAAkB;AACpD,YAAA,QAAQ,EAAE,YAAY,CAAC;AAD6B,WAAlB,CAX/B;;AAAA;AAWC,UAAA,IAXD;AAAA,2CAcE;AAAE,YAAA,IAAI,EAAJ,IAAF;AAAQ,YAAA,IAAI,EAAJ;AAAR,WAdF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { EncodingType, readAsStringAsync } from 'expo-file-system';\nimport { Image } from 'react-native';\nimport { resolveAsync } from './resolveAsync';\n\nfunction getSizeAsync(uri: string): Promise<{ width: number; height: number }> {\n  return new Promise((resolve, reject) =>\n    Image.getSize(uri, (width, height) => resolve({ width, height }), reject)\n  );\n}\n\nexport async function base64forImageUriAsync(\n  file: any\n): Promise<{\n  data: string;\n  size: {\n    width: number;\n    height: number;\n  };\n}> {\n  const asset = await resolveAsync(file);\n  const size = await getSizeAsync(asset.localUri!);\n  const data = await readAsStringAsync(asset.localUri!, {\n    encoding: EncodingType.Base64,\n  });\n  return { data, size };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}