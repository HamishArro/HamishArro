{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Asset } from 'expo-asset';\n\nvar isReactImageFormat = function isReactImageFormat(object) {\n  return object !== null && typeof object === 'object' && !(object instanceof Asset) && object.uri !== null && typeof object.uri === 'string';\n};\n\nexport function resolveAsync(fileReference) {\n  var asset, _asset;\n\n  return _regeneratorRuntime.async(function resolveAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!isReactImageFormat(fileReference)) {\n            _context.next = 4;\n            break;\n          }\n\n          return _context.abrupt(\"return\", resolveAsync(fileReference.uri));\n\n        case 4:\n          if (!(typeof fileReference === 'number')) {\n            _context.next = 9;\n            break;\n          }\n\n          asset = Asset.fromModule(fileReference);\n          return _context.abrupt(\"return\", resolveAsync(asset));\n\n        case 9:\n          if (!(typeof fileReference === 'string')) {\n            _context.next = 12;\n            break;\n          }\n\n          _asset = Asset.fromURI(fileReference);\n          return _context.abrupt(\"return\", resolveAsync(_asset));\n\n        case 12:\n          if (!(fileReference instanceof Asset)) {\n            _context.next = 27;\n            break;\n          }\n\n          if (fileReference.localUri) {\n            _context.next = 26;\n            break;\n          }\n\n          _context.prev = 14;\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(fileReference.downloadAsync());\n\n        case 17:\n          _context.next = 26;\n          break;\n\n        case 19:\n          _context.prev = 19;\n          _context.t0 = _context[\"catch\"](14);\n\n          if (!_context.t0.message.includes('unsupported URL')) {\n            _context.next = 25;\n            break;\n          }\n\n          fileReference.localUri = fileReference.uri;\n          _context.next = 26;\n          break;\n\n        case 25:\n          throw _context.t0;\n\n        case 26:\n          return _context.abrupt(\"return\", fileReference);\n\n        case 27:\n          throw new Error(\"Cannot resolve asset automatically: \" + fileReference);\n\n        case 28:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[14, 19]], Promise);\n}","map":{"version":3,"sources":["../src/resolveAsync.ts"],"names":[],"mappings":";AAAA,SAAS,KAAT,QAAsB,YAAtB;;AAEA,IAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAA,MAAM;AAAA,SAC/B,MAAM,KAAK,IAAX,IACA,OAAO,MAAP,KAAkB,QADlB,IAEA,EAAE,MAAM,YAAY,KAApB,CAFA,IAGA,MAAM,CAAC,GAAP,KAAe,IAHf,IAIA,OAAO,MAAM,CAAC,GAAd,KAAsB,QALS;AAAA,CAAjC;;AAOA,OAAO,SAAe,YAAf,CAA4B,aAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eAED,kBAAkB,CAAC,aAAD,CAFjB;AAAA;AAAA;AAAA;;AAAA,2CAGI,YAAY,CAAC,aAAa,CAAC,GAAf,CAHhB;;AAAA;AAAA,gBAIM,OAAO,aAAP,KAAyB,QAJ/B;AAAA;AAAA;AAAA;;AAKG,UAAA,KALH,GAKW,KAAK,CAAC,UAAN,CAAiB,aAAjB,CALX;AAAA,2CAMI,YAAY,CAAC,KAAD,CANhB;;AAAA;AAAA,gBAOM,OAAO,aAAP,KAAyB,QAP/B;AAAA;AAAA;AAAA;;AAQG,UAAA,MARH,GAQW,KAAK,CAAC,OAAN,CAAc,aAAd,CARX;AAAA,2CASI,YAAY,CAAC,MAAD,CAThB;;AAAA;AAAA,gBAaD,aAAa,YAAY,KAbxB;AAAA;AAAA;AAAA;;AAAA,cAcE,aAAa,CAAC,QAdhB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAgBO,aAAa,CAAC,aAAd,EAhBP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,eAmBK,YAAM,OAAN,CAAc,QAAd,CAAuB,iBAAvB,CAnBL;AAAA;AAAA;AAAA;;AAoBG,UAAA,aAAa,CAAC,QAAd,GAAyB,aAAa,CAAC,GAAvC;AApBH;AAAA;;AAAA;AAAA;;AAAA;AAAA,2CA0BI,aA1BJ;;AAAA;AAAA,gBA4BC,IAAI,KAAJ,0CAAiD,aAAjD,CA5BD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Asset } from 'expo-asset';\n\nconst isReactImageFormat = object =>\n  object !== null &&\n  typeof object === 'object' &&\n  !(object instanceof Asset) &&\n  object.uri !== null &&\n  typeof object.uri === 'string';\n\nexport async function resolveAsync(fileReference: any): Promise<Asset> {\n  // Reduce format\n  if (isReactImageFormat(fileReference)) {\n    return resolveAsync(fileReference.uri);\n  } else if (typeof fileReference === 'number') {\n    const asset = Asset.fromModule(fileReference);\n    return resolveAsync(asset);\n  } else if (typeof fileReference === 'string') {\n    const asset = Asset.fromURI(fileReference);\n    return resolveAsync(asset);\n  }\n\n  // Load asset URI\n  if (fileReference instanceof Asset) {\n    if (!fileReference.localUri) {\n      try {\n        await fileReference.downloadAsync();\n      } catch (error) {\n        // Handle weird Expo iOS error where remote URIs cannot be downloaded.\n        if (error.message.includes('unsupported URL')) {\n          fileReference.localUri = fileReference.uri;\n        } else {\n          throw error;\n        }\n      }\n    }\n    return fileReference;\n  }\n  throw new Error(`Cannot resolve asset automatically: ${fileReference}`);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}