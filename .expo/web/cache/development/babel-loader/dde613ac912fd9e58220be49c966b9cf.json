{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, UnavailabilityError } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { v4 as uuidv4 } from 'uuid';\nimport ExponentFileSystem from \"./ExponentFileSystem\";\nimport { EncodingType, FileSystemSessionType, FileSystemUploadType } from \"./FileSystem.types\";\n\nif (!ExponentFileSystem) {\n  console.warn(\"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\");\n}\n\nvar _unused = new EventEmitter(ExponentFileSystem);\n\nexport { EncodingType, FileSystemSessionType, FileSystemUploadType };\n\nfunction normalizeEndingSlash(p) {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n\n  return null;\n}\n\nexport var documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport var cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\nvar bundledAssets = ExponentFileSystem.bundledAssets,\n    bundleDirectory = ExponentFileSystem.bundleDirectory;\nexport { bundledAssets, bundleDirectory };\nexport function getInfoAsync(fileUri) {\n  var options,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getInfoAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n          if (ExponentFileSystem.getInfoAsync) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getInfoAsync(fileUri, options));\n\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function readAsStringAsync(fileUri, options) {\n  return _regeneratorRuntime.async(function readAsStringAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExponentFileSystem.readAsStringAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.readAsStringAsync(fileUri, options || {}));\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getContentUriAsync(fileUri) {\n  return _regeneratorRuntime.async(function getContentUriAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context3.next = 8;\n            break;\n          }\n\n          if (ExponentFileSystem.getContentUriAsync) {\n            _context3.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getContentUriAsync(fileUri));\n\n        case 5:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 8:\n          return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n            resolve(fileUri);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function writeAsStringAsync(fileUri, contents) {\n  var options,\n      _args4 = arguments;\n  return _regeneratorRuntime.async(function writeAsStringAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n\n          if (ExponentFileSystem.writeAsStringAsync) {\n            _context4.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n\n        case 3:\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.writeAsStringAsync(fileUri, contents, options));\n\n        case 5:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteAsync(fileUri) {\n  var options,\n      _args5 = arguments;\n  return _regeneratorRuntime.async(function deleteAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n\n          if (ExponentFileSystem.deleteAsync) {\n            _context5.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n\n        case 3:\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.deleteAsync(fileUri, options));\n\n        case 5:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteLegacyDocumentDirectoryAndroid() {\n  var legacyDocumentDirectory;\n  return _regeneratorRuntime.async(function deleteLegacyDocumentDirectoryAndroid$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!(Platform.OS !== 'android' || documentDirectory == null)) {\n            _context6.next = 2;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 2:\n          legacyDocumentDirectory = documentDirectory + \"ExperienceData/\";\n          _context6.next = 5;\n          return _regeneratorRuntime.awrap(deleteAsync(legacyDocumentDirectory, {\n            idempotent: true\n          }));\n\n        case 5:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 6:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function moveAsync(options) {\n  return _regeneratorRuntime.async(function moveAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (ExponentFileSystem.moveAsync) {\n            _context7.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'moveAsync');\n\n        case 2:\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.moveAsync(options));\n\n        case 4:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function copyAsync(options) {\n  return _regeneratorRuntime.async(function copyAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (ExponentFileSystem.copyAsync) {\n            _context8.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'copyAsync');\n\n        case 2:\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.copyAsync(options));\n\n        case 4:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function makeDirectoryAsync(fileUri) {\n  var options,\n      _args9 = arguments;\n  return _regeneratorRuntime.async(function makeDirectoryAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n\n          if (ExponentFileSystem.makeDirectoryAsync) {\n            _context9.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n\n        case 3:\n          _context9.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.makeDirectoryAsync(fileUri, options));\n\n        case 5:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 6:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function readDirectoryAsync(fileUri) {\n  return _regeneratorRuntime.async(function readDirectoryAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          if (ExponentFileSystem.readDirectoryAsync) {\n            _context10.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n\n        case 2:\n          _context10.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.readDirectoryAsync(fileUri, {}));\n\n        case 4:\n          return _context10.abrupt(\"return\", _context10.sent);\n\n        case 5:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getFreeDiskStorageAsync() {\n  return _regeneratorRuntime.async(function getFreeDiskStorageAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          if (ExponentFileSystem.getFreeDiskStorageAsync) {\n            _context11.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n\n        case 2:\n          _context11.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getFreeDiskStorageAsync());\n\n        case 4:\n          return _context11.abrupt(\"return\", _context11.sent);\n\n        case 5:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getTotalDiskCapacityAsync() {\n  return _regeneratorRuntime.async(function getTotalDiskCapacityAsync$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          if (ExponentFileSystem.getTotalDiskCapacityAsync) {\n            _context12.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n\n        case 2:\n          _context12.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getTotalDiskCapacityAsync());\n\n        case 4:\n          return _context12.abrupt(\"return\", _context12.sent);\n\n        case 5:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function downloadAsync(uri, fileUri) {\n  var options,\n      _args13 = arguments;\n  return _regeneratorRuntime.async(function downloadAsync$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};\n\n          if (ExponentFileSystem.downloadAsync) {\n            _context13.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n\n        case 3:\n          _context13.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.downloadAsync(uri, fileUri, _objectSpread({\n            sessionType: FileSystemSessionType.BACKGROUND\n          }, options)));\n\n        case 5:\n          return _context13.abrupt(\"return\", _context13.sent);\n\n        case 6:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function uploadAsync(url, fileUri) {\n  var options,\n      _args14 = arguments;\n  return _regeneratorRuntime.async(function uploadAsync$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          options = _args14.length > 2 && _args14[2] !== undefined ? _args14[2] : {};\n\n          if (ExponentFileSystem.uploadAsync) {\n            _context14.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n\n        case 3:\n          _context14.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.uploadAsync(url, fileUri, _objectSpread(_objectSpread({\n            sessionType: FileSystemSessionType.BACKGROUND,\n            uploadType: FileSystemUploadType.BINARY_CONTENT\n          }, options), {}, {\n            httpMethod: (options.httpMethod || 'POST').toUpperCase()\n          })));\n\n        case 5:\n          return _context14.abrupt(\"return\", _context14.sent);\n\n        case 6:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function createDownloadResumable(uri, fileUri, options, callback, resumeData) {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\nexport var DownloadResumable = function () {\n  function DownloadResumable(url, fileUri) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = arguments.length > 3 ? arguments[3] : undefined;\n    var resumeData = arguments.length > 4 ? arguments[4] : undefined;\n\n    _classCallCheck(this, DownloadResumable);\n\n    this._uuid = uuidv4();\n    this._url = url;\n    this._fileUri = fileUri;\n    this._options = options;\n    this._resumeData = resumeData;\n    this._callback = callback;\n    this._subscription = null;\n    this._emitter = new EventEmitter(ExponentFileSystem);\n  }\n\n  _createClass(DownloadResumable, [{\n    key: \"downloadAsync\",\n    value: function downloadAsync() {\n      return _regeneratorRuntime.async(function downloadAsync$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumableStartAsync) {\n                _context15.next = 2;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n\n            case 2:\n              this._addSubscription();\n\n              _context15.next = 5;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData));\n\n            case 5:\n              return _context15.abrupt(\"return\", _context15.sent);\n\n            case 6:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"pauseAsync\",\n    value: function pauseAsync() {\n      var pauseResult;\n      return _regeneratorRuntime.async(function pauseAsync$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumablePauseAsync) {\n                _context16.next = 2;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n\n            case 2:\n              _context16.next = 4;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumablePauseAsync(this._uuid));\n\n            case 4:\n              pauseResult = _context16.sent;\n\n              this._removeSubscription();\n\n              if (!pauseResult) {\n                _context16.next = 11;\n                break;\n              }\n\n              this._resumeData = pauseResult.resumeData;\n              return _context16.abrupt(\"return\", this.savable());\n\n            case 11:\n              throw new Error('Unable to generate a savable pause state');\n\n            case 12:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"resumeAsync\",\n    value: function resumeAsync() {\n      return _regeneratorRuntime.async(function resumeAsync$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumableStartAsync) {\n                _context17.next = 2;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n\n            case 2:\n              this._addSubscription();\n\n              _context17.next = 5;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData));\n\n            case 5:\n              return _context17.abrupt(\"return\", _context17.sent);\n\n            case 6:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"savable\",\n    value: function savable() {\n      return {\n        url: this._url,\n        fileUri: this._fileUri,\n        options: this._options,\n        resumeData: this._resumeData\n      };\n    }\n  }, {\n    key: \"_addSubscription\",\n    value: function _addSubscription() {\n      var _this = this;\n\n      if (this._subscription) {\n        return;\n      }\n\n      this._subscription = this._emitter.addListener('expo-file-system.downloadProgress', function (event) {\n        if (event.uuid === _this._uuid) {\n          var callback = _this._callback;\n\n          if (callback) {\n            callback(event.data);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_removeSubscription\",\n    value: function _removeSubscription() {\n      if (!this._subscription) {\n        return;\n      }\n\n      this._emitter.removeSubscription(this._subscription);\n\n      this._subscription = null;\n    }\n  }]);\n\n  return DownloadResumable;\n}();\nvar baseReadAsStringAsync = readAsStringAsync;\nvar baseWriteAsStringAsync = writeAsStringAsync;\nvar baseDeleteAsync = deleteAsync;\nvar baseMoveAsync = moveAsync;\nvar baseCopyAsync = copyAsync;\nexport var StorageAccessFramework;\n\n(function (StorageAccessFramework) {\n  function getUriForDirectoryInRoot(folderName) {\n    return \"content://com.android.externalstorage.documents/tree/primary:\" + folderName + \"/document/primary:\" + folderName;\n  }\n\n  StorageAccessFramework.getUriForDirectoryInRoot = getUriForDirectoryInRoot;\n\n  function requestDirectoryPermissionsAsync() {\n    var initialFileUrl,\n        _args18 = arguments;\n    return _regeneratorRuntime.async(function requestDirectoryPermissionsAsync$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            initialFileUrl = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : null;\n\n            if (ExponentFileSystem.requestDirectoryPermissionsAsync) {\n              _context18.next = 3;\n              break;\n            }\n\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.requestDirectoryPermissionsAsync');\n\n          case 3:\n            _context18.next = 5;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl));\n\n          case 5:\n            return _context18.abrupt(\"return\", _context18.sent);\n\n          case 6:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  StorageAccessFramework.requestDirectoryPermissionsAsync = requestDirectoryPermissionsAsync;\n\n  function readDirectoryAsync(dirUri) {\n    return _regeneratorRuntime.async(function readDirectoryAsync$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            if (ExponentFileSystem.readSAFDirectoryAsync) {\n              _context19.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.readDirectoryAsync');\n\n          case 2:\n            _context19.next = 4;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.readSAFDirectoryAsync(dirUri, {}));\n\n          case 4:\n            return _context19.abrupt(\"return\", _context19.sent);\n\n          case 5:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  StorageAccessFramework.readDirectoryAsync = readDirectoryAsync;\n\n  function makeDirectoryAsync(parentUri, dirName) {\n    return _regeneratorRuntime.async(function makeDirectoryAsync$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            if (ExponentFileSystem.makeSAFDirectoryAsync) {\n              _context20.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.makeDirectoryAsync');\n\n          case 2:\n            _context20.next = 4;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName));\n\n          case 4:\n            return _context20.abrupt(\"return\", _context20.sent);\n\n          case 5:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  StorageAccessFramework.makeDirectoryAsync = makeDirectoryAsync;\n\n  function createFileAsync(parentUri, fileName, mimeType) {\n    return _regeneratorRuntime.async(function createFileAsync$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            if (ExponentFileSystem.createSAFFileAsync) {\n              _context21.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n\n          case 2:\n            _context21.next = 4;\n            return _regeneratorRuntime.awrap(ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType));\n\n          case 4:\n            return _context21.abrupt(\"return\", _context21.sent);\n\n          case 5:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  StorageAccessFramework.createFileAsync = createFileAsync;\n  StorageAccessFramework.writeAsStringAsync = baseWriteAsStringAsync;\n  StorageAccessFramework.readAsStringAsync = baseReadAsStringAsync;\n  StorageAccessFramework.deleteAsync = baseDeleteAsync;\n  StorageAccessFramework.moveAsync = baseMoveAsync;\n  StorageAccessFramework.copyAsync = baseCopyAsync;\n})(StorageAccessFramework || (StorageAccessFramework = {}));","map":{"version":3,"sources":["../src/FileSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from '@unimodules/core';\nimport { Platform } from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ExponentFileSystem from './ExponentFileSystem';\nimport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  DownloadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  ProgressEvent,\n  ReadingOptions,\n  WritingOptions,\n} from './FileSystem.types';\n\nif (!ExponentFileSystem) {\n  console.warn(\n    \"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\"\n  );\n}\n// Prevent webpack from pruning this.\nconst _unused = new EventEmitter(ExponentFileSystem); // eslint-disable-line\n\nexport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  DownloadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  ProgressEvent,\n  ReadingOptions,\n  WritingOptions,\n};\n\nfunction normalizeEndingSlash(p: string | null): string | null {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n  return null;\n}\n\nexport const documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport const cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\n\nexport const { bundledAssets, bundleDirectory } = ExponentFileSystem;\n\nexport async function getInfoAsync(\n  fileUri: string,\n  options: { md5?: boolean; size?: boolean } = {}\n): Promise<FileInfo> {\n  if (!ExponentFileSystem.getInfoAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n  }\n  return await ExponentFileSystem.getInfoAsync(fileUri, options);\n}\n\nexport async function readAsStringAsync(\n  fileUri: string,\n  options?: ReadingOptions\n): Promise<string> {\n  if (!ExponentFileSystem.readAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n  }\n  return await ExponentFileSystem.readAsStringAsync(fileUri, options || {});\n}\n\nexport async function getContentUriAsync(fileUri: string): Promise<string> {\n  if (Platform.OS === 'android') {\n    if (!ExponentFileSystem.getContentUriAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n    }\n    return await ExponentFileSystem.getContentUriAsync(fileUri);\n  } else {\n    return new Promise(function(resolve, reject) {\n      resolve(fileUri);\n    });\n  }\n}\n\nexport async function writeAsStringAsync(\n  fileUri: string,\n  contents: string,\n  options: WritingOptions = {}\n): Promise<void> {\n  if (!ExponentFileSystem.writeAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n  }\n  return await ExponentFileSystem.writeAsStringAsync(fileUri, contents, options);\n}\n\nexport async function deleteAsync(\n  fileUri: string,\n  options: { idempotent?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.deleteAsync) {\n    throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n  }\n  return await ExponentFileSystem.deleteAsync(fileUri, options);\n}\n\nexport async function deleteLegacyDocumentDirectoryAndroid(): Promise<void> {\n  if (Platform.OS !== 'android' || documentDirectory == null) {\n    return;\n  }\n  const legacyDocumentDirectory = `${documentDirectory}ExperienceData/`;\n  return await deleteAsync(legacyDocumentDirectory, { idempotent: true });\n}\n\nexport async function moveAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.moveAsync) {\n    throw new UnavailabilityError('expo-file-system', 'moveAsync');\n  }\n  return await ExponentFileSystem.moveAsync(options);\n}\n\nexport async function copyAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.copyAsync) {\n    throw new UnavailabilityError('expo-file-system', 'copyAsync');\n  }\n  return await ExponentFileSystem.copyAsync(options);\n}\n\nexport async function makeDirectoryAsync(\n  fileUri: string,\n  options: { intermediates?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.makeDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n  }\n  return await ExponentFileSystem.makeDirectoryAsync(fileUri, options);\n}\n\nexport async function readDirectoryAsync(fileUri: string): Promise<string[]> {\n  if (!ExponentFileSystem.readDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n  }\n  return await ExponentFileSystem.readDirectoryAsync(fileUri, {});\n}\n\nexport async function getFreeDiskStorageAsync(): Promise<number> {\n  if (!ExponentFileSystem.getFreeDiskStorageAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n  }\n  return await ExponentFileSystem.getFreeDiskStorageAsync();\n}\n\nexport async function getTotalDiskCapacityAsync(): Promise<number> {\n  if (!ExponentFileSystem.getTotalDiskCapacityAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n  }\n  return await ExponentFileSystem.getTotalDiskCapacityAsync();\n}\n\nexport async function downloadAsync(\n  uri: string,\n  fileUri: string,\n  options: DownloadOptions = {}\n): Promise<FileSystemDownloadResult> {\n  if (!ExponentFileSystem.downloadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n  }\n\n  return await ExponentFileSystem.downloadAsync(uri, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    ...options,\n  });\n}\n\nexport async function uploadAsync(\n  url: string,\n  fileUri: string,\n  options: FileSystemUploadOptions = {}\n): Promise<FileSystemUploadResult> {\n  if (!ExponentFileSystem.uploadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n  }\n\n  return await ExponentFileSystem.uploadAsync(url, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    uploadType: FileSystemUploadType.BINARY_CONTENT,\n    ...options,\n    httpMethod: (options.httpMethod || 'POST').toUpperCase(),\n  });\n}\n\nexport function createDownloadResumable(\n  uri: string,\n  fileUri: string,\n  options?: DownloadOptions,\n  callback?: DownloadProgressCallback,\n  resumeData?: string\n): DownloadResumable {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\n\nexport class DownloadResumable {\n  _uuid: string;\n  _url: string;\n  _fileUri: string;\n  _options: DownloadOptions;\n  _resumeData?: string;\n  _callback?: DownloadProgressCallback;\n  _subscription?: Subscription | null;\n  _emitter: EventEmitter;\n\n  constructor(\n    url: string,\n    fileUri: string,\n    options: DownloadOptions = {},\n    callback?: DownloadProgressCallback,\n    resumeData?: string\n  ) {\n    this._uuid = uuidv4();\n    this._url = url;\n    this._fileUri = fileUri;\n    this._options = options;\n    this._resumeData = resumeData;\n    this._callback = callback;\n    this._subscription = null;\n    this._emitter = new EventEmitter(ExponentFileSystem);\n  }\n\n  async downloadAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n    this._addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this._url,\n      this._fileUri,\n      this._uuid,\n      this._options,\n      this._resumeData\n    );\n  }\n\n  async pauseAsync(): Promise<DownloadPauseState> {\n    if (!ExponentFileSystem.downloadResumablePauseAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n    }\n    const pauseResult = await ExponentFileSystem.downloadResumablePauseAsync(this._uuid);\n    this._removeSubscription();\n    if (pauseResult) {\n      this._resumeData = pauseResult.resumeData;\n      return this.savable();\n    } else {\n      throw new Error('Unable to generate a savable pause state');\n    }\n  }\n\n  async resumeAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n    this._addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this._url,\n      this._fileUri,\n      this._uuid,\n      this._options,\n      this._resumeData\n    );\n  }\n\n  savable(): DownloadPauseState {\n    return {\n      url: this._url,\n      fileUri: this._fileUri,\n      options: this._options,\n      resumeData: this._resumeData,\n    };\n  }\n\n  _addSubscription(): void {\n    if (this._subscription) {\n      return;\n    }\n    this._subscription = this._emitter.addListener(\n      'expo-file-system.downloadProgress',\n      (event: ProgressEvent) => {\n        if (event.uuid === this._uuid) {\n          const callback = this._callback;\n          if (callback) {\n            callback(event.data);\n          }\n        }\n      }\n    );\n  }\n\n  _removeSubscription(): void {\n    if (!this._subscription) {\n      return;\n    }\n    this._emitter.removeSubscription(this._subscription);\n    this._subscription = null;\n  }\n}\n\nconst baseReadAsStringAsync = readAsStringAsync;\nconst baseWriteAsStringAsync = writeAsStringAsync;\nconst baseDeleteAsync = deleteAsync;\nconst baseMoveAsync = moveAsync;\nconst baseCopyAsync = copyAsync;\n/**\n * Android only\n */\nexport namespace StorageAccessFramework {\n  export function getUriForDirectoryInRoot(folderName: string) {\n    return `content://com.android.externalstorage.documents/tree/primary:${folderName}/document/primary:${folderName}`;\n  }\n\n  export async function requestDirectoryPermissionsAsync(\n    initialFileUrl: string | null = null\n  ): Promise<FileSystemRequestDirectoryPermissionsResult> {\n    if (!ExponentFileSystem.requestDirectoryPermissionsAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.requestDirectoryPermissionsAsync'\n      );\n    }\n\n    return await ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl);\n  }\n\n  export async function readDirectoryAsync(dirUri: string): Promise<string[]> {\n    if (!ExponentFileSystem.readSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.readDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.readSAFDirectoryAsync(dirUri, {});\n  }\n\n  export async function makeDirectoryAsync(parentUri: string, dirName: string): Promise<string> {\n    if (!ExponentFileSystem.makeSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.makeDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName);\n  }\n\n  export async function createFileAsync(\n    parentUri: string,\n    fileName: string,\n    mimeType: string\n  ): Promise<string> {\n    if (!ExponentFileSystem.createSAFFileAsync) {\n      throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n    }\n    return await ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType);\n  }\n\n  export const writeAsStringAsync = baseWriteAsStringAsync;\n  export const readAsStringAsync = baseReadAsStringAsync;\n  export const deleteAsync = baseDeleteAsync;\n  export const moveAsync = baseMoveAsync;\n  export const copyAsync = baseCopyAsync;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}