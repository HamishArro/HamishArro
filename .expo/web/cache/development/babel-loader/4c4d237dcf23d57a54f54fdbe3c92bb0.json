{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { ObjectLoader, BufferGeometryLoader } from 'three';\n\nfunction parseWithLoaderAsync(_ref) {\n  var json, assetProvider, loader;\n  return _regeneratorRuntime.async(function parseWithLoaderAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          json = _ref.json, assetProvider = _ref.assetProvider, loader = _ref.loader;\n          loader.setPath && loader.setPath(assetProvider);\n          return _context.abrupt(\"return\", loader.parse(json, assetProvider));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function parseAsync(_ref2) {\n  var json, format, assetProvider;\n  return _regeneratorRuntime.async(function parseAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          json = _ref2.json, format = _ref2.format, assetProvider = _ref2.assetProvider;\n\n          if (!format && json.metadata && json.metadata.type) {\n            format = json.metadata.type;\n          }\n\n          if (format) {\n            _context2.next = 4;\n            break;\n          }\n\n          throw new Error('ExpoTHREE.parseAsync(): Invalid null format provided');\n\n        case 4:\n          _context2.t0 = format;\n          _context2.next = _context2.t0 === 'clara' ? 7 : _context2.t0 === 'object' ? 7 : _context2.t0 === 'json' ? 7 : _context2.t0 === 'blender' ? 7 : _context2.t0 === 'buffer' ? 8 : _context2.t0 === 'scene' ? 9 : 9;\n          break;\n\n        case 7:\n          return _context2.abrupt(\"return\", parseWithLoaderAsync({\n            json: json,\n            assetProvider: assetProvider,\n            loader: new ObjectLoader()\n          }));\n\n        case 8:\n          return _context2.abrupt(\"return\", parseWithLoaderAsync({\n            json: json,\n            assetProvider: assetProvider,\n            loader: new BufferGeometryLoader()\n          }));\n\n        case 9:\n          throw new Error(\"ExpoTHREE.parseAsync(): \" + format + \" not supported.\");\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/parseAsync.ts"],"names":[],"mappings":";AAAA,SAAS,YAAT,EAAuB,oBAAvB,QAAmD,OAAnD;;AAEA,SAAe,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,UAAA,IADF,QACE,IADF,EAEE,aAFF,QAEE,aAFF,EAGE,MAHF,QAGE,MAHF;AAKE,UAAA,MAAM,CAAC,OAAP,IAAkB,MAAM,CAAC,OAAP,CAAe,aAAf,CAAlB;AALF,2CAMS,MAAM,CAAC,KAAP,CAAa,IAAb,EAAmB,aAAnB,CANT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,eAAe,SAAe,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,UAAA,IADa,SACb,IADa,EAEb,MAFa,SAEb,MAFa,EAGb,aAHa,SAGb,aAHa;;AAKb,cAAI,CAAC,MAAD,IAAW,IAAI,CAAC,QAAhB,IAA4B,IAAI,CAAC,QAAL,CAAc,IAA9C,EAAoD;AAClD,YAAA,MAAM,GAAG,IAAI,CAAC,QAAL,CAAc,IAAvB;AACD;;AAPY,cASR,MATQ;AAAA;AAAA;AAAA;;AAAA,gBAUL,IAAI,KAAJ,CAAU,sDAAV,CAVK;;AAAA;AAAA,yBAaL,MAbK;AAAA,4CAcN,OAdM,wBAeN,QAfM,wBAgBN,MAhBM,wBAiBN,SAjBM,wBAuBN,QAvBM,wBA6BN,OA7BM;AAAA;;AAAA;AAAA,4CAkBF,oBAAoB,CAAC;AAC1B,YAAA,IAAI,EAAJ,IAD0B;AAE1B,YAAA,aAAa,EAAb,aAF0B;AAG1B,YAAA,MAAM,EAAE,IAAI,YAAJ;AAHkB,WAAD,CAlBlB;;AAAA;AAAA,4CAwBF,oBAAoB,CAAC;AAC1B,YAAA,IAAI,EAAJ,IAD0B;AAE1B,YAAA,aAAa,EAAb,aAF0B;AAG1B,YAAA,MAAM,EAAE,IAAI,oBAAJ;AAHkB,WAAD,CAxBlB;;AAAA;AAAA,gBA+BH,IAAI,KAAJ,8BAAqC,MAArC,qBA/BG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { ObjectLoader, BufferGeometryLoader } from 'three';\n\nasync function parseWithLoaderAsync({\n  json,\n  assetProvider,\n  loader,\n}): Promise<any> {\n  loader.setPath && loader.setPath(assetProvider);\n  return loader.parse(json, assetProvider);\n}\n\ntype Parseable = {\n  json: any;\n  format?: string;\n  onProgress?: (...args: any[]) => any;\n  assetProvider: any;\n};\n\nexport default async function parseAsync({\n  json,\n  format,\n  assetProvider,\n}: Parseable): Promise<any> {\n  if (!format && json.metadata && json.metadata.type) {\n    format = json.metadata.type;\n  }\n\n  if (!format) {\n    throw new Error('ExpoTHREE.parseAsync(): Invalid null format provided');\n  }\n\n  switch (format) {\n    case 'clara':\n    case 'object':\n    case 'json':\n    case 'blender':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new ObjectLoader(),\n      });\n    case 'buffer':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new BufferGeometryLoader(),\n      });\n    case 'scene':\n    default:\n      throw new Error(`ExpoTHREE.parseAsync(): ${format} not supported.`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}