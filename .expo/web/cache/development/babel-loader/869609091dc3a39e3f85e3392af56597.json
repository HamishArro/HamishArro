{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { resolveAsync } from 'expo-asset-utils';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { FileLoader } from 'three';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport readAsStringAsync from \"./readAsStringAsync\";\n\nfunction loadFileAsync(_ref) {\n  var _await$resolveAsync$l;\n\n  var asset, funcName;\n  return _regeneratorRuntime.async(function loadFileAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          asset = _ref.asset, funcName = _ref.funcName;\n\n          if (asset) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new Error(\"ExpoTHREE.\" + funcName + \": Cannot parse a null asset\");\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(resolveAsync(asset));\n\n        case 5:\n          _context.t0 = _await$resolveAsync$l = _context.sent.localUri;\n\n          if (!(_context.t0 != null)) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.t1 = _await$resolveAsync$l;\n          _context.next = 11;\n          break;\n\n        case 10:\n          _context.t1 = null;\n\n        case 11:\n          return _context.abrupt(\"return\", _context.t1);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function loadMtlAsync(_ref2) {\n  var asset, onAssetRequested, uri, loader;\n  return _regeneratorRuntime.async(function loadMtlAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          asset = _ref2.asset, onAssetRequested = _ref2.onAssetRequested;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(loadFileAsync({\n            asset: asset,\n            funcName: 'loadMtlAsync'\n          }));\n\n        case 3:\n          uri = _context2.sent;\n\n          if (uri) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 6:\n          loader = new MTLLoader();\n          loader.setPath(onAssetRequested);\n\n          if (!(Platform.OS === 'web')) {\n            _context2.next = 12;\n            break;\n          }\n\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            return loader.load(uri, resolve, function () {}, reject);\n          }));\n\n        case 11:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 12:\n          return _context2.abrupt(\"return\", loadFileContentsAsync(loader, uri, 'loadMtlAsync'));\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function loadObjAsync(options) {\n  var asset, onAssetRequested, onMtlAssetRequested, mtlAsset, materials, nextMaterials, uri, loader;\n  return _regeneratorRuntime.async(function loadObjAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          asset = options.asset, onAssetRequested = options.onAssetRequested, onMtlAssetRequested = options.onMtlAssetRequested, mtlAsset = options.mtlAsset, materials = options.materials;\n          nextMaterials = materials;\n\n          if (!(nextMaterials == null && mtlAsset != null)) {\n            _context3.next = 7;\n            break;\n          }\n\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(loadMtlAsync({\n            asset: mtlAsset,\n            onAssetRequested: onMtlAssetRequested || onAssetRequested\n          }));\n\n        case 5:\n          nextMaterials = _context3.sent;\n          nextMaterials.preload();\n\n        case 7:\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(loadFileAsync({\n            asset: asset,\n            funcName: 'loadObjAsync'\n          }));\n\n        case 9:\n          uri = _context3.sent;\n\n          if (uri) {\n            _context3.next = 12;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 12:\n          loader = new OBJLoader();\n\n          if (onAssetRequested) {\n            loader.setPath(onAssetRequested);\n          }\n\n          if (nextMaterials != null) {\n            loader.setMaterials(nextMaterials);\n          }\n\n          if (!(Platform.OS === 'web')) {\n            _context3.next = 19;\n            break;\n          }\n\n          _context3.next = 18;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            return loader.load(uri, resolve, function () {}, reject);\n          }));\n\n        case 18:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 19:\n          return _context3.abrupt(\"return\", loadFileContentsAsync(loader, uri, 'loadObjAsync'));\n\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function loadDaeAsync(_ref3) {\n  var asset, onAssetRequested, onProgress, uri;\n  return _regeneratorRuntime.async(function loadDaeAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          asset = _ref3.asset, onAssetRequested = _ref3.onAssetRequested, onProgress = _ref3.onProgress;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(loadFileAsync({\n            asset: asset,\n            funcName: 'loadDaeAsync'\n          }));\n\n        case 3:\n          uri = _context4.sent;\n\n          if (!(typeof uri !== 'string' || uri == null)) {\n            _context4.next = 6;\n            break;\n          }\n\n          return _context4.abrupt(\"return\");\n\n        case 6:\n          return _context4.abrupt(\"return\", new Promise(function (res, rej) {\n            return new FileLoader().load(uri, function (text) {\n              var loader = new ColladaLoader();\n              var parsedResult = loader.parse(text, onAssetRequested);\n              res(parsedResult);\n            }, onProgress, rej);\n          }));\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction loadFileContentsAsync(loader, uri, funcName) {\n  var fileContents, message;\n  return _regeneratorRuntime.async(function loadFileContentsAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(readAsStringAsync(uri));\n\n        case 3:\n          fileContents = _context5.sent;\n          return _context5.abrupt(\"return\", loader.parse(fileContents));\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          message = _context5.t0.message;\n          throw new Error(\"ExpoTHREE.\" + funcName + \": Expo.FileSystem Failed to read uri: \" + uri + \". \" + message);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nexport function loadArrayBufferAsync(_ref5) {\n  var uri, onProgress, loader;\n  return _regeneratorRuntime.async(function loadArrayBufferAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          uri = _ref5.uri, onProgress = _ref5.onProgress;\n          loader = new FileLoader();\n          loader.setResponseType('arraybuffer');\n          return _context6.abrupt(\"return\", new Promise(function (res, rej) {\n            return loader.load(uri, res, onProgress, rej);\n          }));\n\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../src/loaders/loadModelsAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolveAsync } from 'expo-asset-utils';\nimport { Platform } from 'react-native';\nimport { FileLoader } from 'three';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\n\nimport readAsStringAsync from './readAsStringAsync';\n\nasync function loadFileAsync({ asset, funcName }): Promise<string | null> {\n  if (!asset) {\n    throw new Error(`ExpoTHREE.${funcName}: Cannot parse a null asset`);\n  }\n  return (await resolveAsync(asset)).localUri ?? null;\n}\n\nexport async function loadMtlAsync({ asset, onAssetRequested }): Promise<any> {\n  const uri = await loadFileAsync({\n    asset,\n    funcName: 'loadMtlAsync',\n  });\n  if (!uri) return;\n\n  const loader = new MTLLoader();\n  loader.setPath(onAssetRequested);\n\n  if (Platform.OS === 'web') {\n    return await new Promise((resolve, reject) =>\n      loader.load(uri, resolve, () => {}, reject)\n    );\n  }\n\n  return loadFileContentsAsync(loader, uri, 'loadMtlAsync');\n}\n\nexport async function loadObjAsync(options: {\n  asset: any;\n  onAssetRequested?: (...args: any[]) => any;\n  onMtlAssetRequested?: (...args: any[]) => any;\n  mtlAsset?: any;\n  materials?: any;\n}): Promise<any> {\n  const {\n    asset,\n    onAssetRequested,\n    onMtlAssetRequested,\n    mtlAsset,\n    materials,\n  } = options;\n  let nextMaterials = materials;\n  if (nextMaterials == null && mtlAsset != null) {\n    nextMaterials = await loadMtlAsync({\n      asset: mtlAsset,\n      onAssetRequested: onMtlAssetRequested || onAssetRequested,\n    });\n    nextMaterials.preload();\n  }\n\n  const uri = await loadFileAsync({\n    asset,\n    funcName: 'loadObjAsync',\n  });\n  if (!uri) return;\n\n  const loader = new OBJLoader();\n  if (onAssetRequested) {\n    loader.setPath(onAssetRequested as any);\n  }\n  if (nextMaterials != null) {\n    loader.setMaterials(nextMaterials);\n  }\n\n  if (Platform.OS === 'web') {\n    return await new Promise((resolve, reject) =>\n      loader.load(uri, resolve, () => {}, reject)\n    );\n  }\n\n  return loadFileContentsAsync(loader, uri, 'loadObjAsync');\n}\n\nexport async function loadDaeAsync({\n  asset,\n  onAssetRequested,\n  onProgress,\n}): Promise<any> {\n  const uri = await loadFileAsync({\n    asset,\n    funcName: 'loadDaeAsync',\n  });\n  if (typeof uri !== 'string' || uri == null) {\n    return;\n  }\n\n  return new Promise((res, rej) =>\n    new FileLoader().load(\n      uri!,\n      text => {\n        // @ts-ignore\n        const loader = new ColladaLoader();\n        const parsedResult = (loader.parse as any)(text, onAssetRequested);\n        res(parsedResult);\n      },\n      onProgress,\n      rej\n    )\n  );\n}\n\nasync function loadFileContentsAsync(loader, uri, funcName): Promise<any> {\n  try {\n    const fileContents = await readAsStringAsync(uri);\n    return loader.parse(fileContents);\n  } catch ({ message }) {\n    // Or model loader THREE.OBJLoader failed to parse fileContents\n    throw new Error(\n      `ExpoTHREE.${funcName}: Expo.FileSystem Failed to read uri: ${uri}. ${message}`\n    );\n  }\n}\n\nexport async function loadArrayBufferAsync({ uri, onProgress }): Promise<any> {\n  const loader = new FileLoader();\n  loader.setResponseType('arraybuffer');\n  return new Promise((res, rej) => loader.load(uri, res, onProgress, rej));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}