{"ast":null,"code":"var _jsxFileName = \"/Users/hamisharro/Documents/Projects/My Portfolio/JavaScript/HamishArro/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport { GLView } from \"expo-gl\";\nimport * as THREE from \"three\";\nimport ExpoTHREE from \"expo-three\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Asset } from \"expo-asset\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\nexport default function App() {\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, React.createElement(GLView, {\n    onContextCreate: onContextCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction onContextCreate(gl) {\n  var windowWidth = Dimensions.get(\"window\").width;\n  var windowHeight = Dimensions.get(\"window\").height;\n  var camera = new THREE.PerspectiveCamera(75, gl.drawingBufferWidth / gl.drawingBufferHeight, 0.1, 1000);\n  var renderer = new ExpoTHREE.Renderer(gl);\n  renderer.setSize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n  var asset = Asset.fromModule(require(\"./models/eyeball/eyeball.obj\"));\n\n  function asyncCall() {\n    var loader, material;\n    return _regeneratorRuntime.async(function asyncCall$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(asset.downloadAsync());\n\n          case 2:\n            loader = new OBJLoader();\n            material = new THREE.MeshBasicMaterial(color);\n            loader.setMaterials(material);\n            loader.load(asset.localUri, function (object) {\n              scene.add(object);\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/hamisharro/Documents/Projects/My Portfolio/JavaScript/HamishArro/App.js"],"names":["React","GLView","THREE","ExpoTHREE","Asset","OBJLoader","App","onContextCreate","gl","windowWidth","Dimensions","get","width","windowHeight","height","camera","PerspectiveCamera","drawingBufferWidth","drawingBufferHeight","renderer","Renderer","setSize","asset","fromModule","require","asyncCall","downloadAsync","loader","material","MeshBasicMaterial","color","setMaterials","load","localUri","object","scene","add","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,SAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;AAEA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,sCAA1B;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,eAAe,EAAEC,eAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,SAASA,eAAT,CAAyBC,EAAzB,EAA6B;AAE3B,MAAMC,WAAW,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAA7C;AACA,MAAMC,YAAY,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAA9C;AAEA,MAAMC,MAAM,GAAG,IAAIb,KAAK,CAACc,iBAAV,CACb,EADa,EAEbR,EAAE,CAACS,kBAAH,GAAwBT,EAAE,CAACU,mBAFd,EAGb,GAHa,EAIb,IAJa,CAAf;AAOA,MAAMC,QAAQ,GAAG,IAAIhB,SAAS,CAACiB,QAAd,CAAuBZ,EAAvB,CAAjB;AACAW,EAAAA,QAAQ,CAACE,OAAT,CAAiBb,EAAE,CAACS,kBAApB,EAAwCT,EAAE,CAACU,mBAA3C;AAEA,MAAMI,KAAK,GAAGlB,KAAK,CAACmB,UAAN,CAAiBC,OAAO,gCAAxB,CAAd;;AAEA,WAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQH,KAAK,CAACI,aAAN,EADR;;AAAA;AAEQC,YAAAA,MAFR,GAEiB,IAAItB,SAAJ,EAFjB;AAGQuB,YAAAA,QAHR,GAGmB,IAAI1B,KAAK,CAAC2B,iBAAV,CAA6BC,KAA7B,CAHnB;AAIEH,YAAAA,MAAM,CAACI,YAAP,CAAoBH,QAApB;AACAD,YAAAA,MAAM,CAACK,IAAP,CAAYV,KAAK,CAACW,QAAlB,EAA4B,UAAUC,MAAV,EAAkB;AAC5CC,cAAAA,KAAK,CAACC,GAAN,CAAUF,MAAV;AACD,aAFD;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASD;;AAED,IAAMG,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from \"react\";\nimport { GLView } from \"expo-gl\";\nimport * as THREE from \"three\";\nimport ExpoTHREE from \"expo-three\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Asset } from \"expo-asset\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\n\nexport default function App() {\n  return (\n    <View>\n      <GLView onContextCreate={onContextCreate} />\n    </View>\n  );\n}\n\nfunction onContextCreate(gl) {\n  // Create a WebGLRenderer without a DOM element\n  const windowWidth = Dimensions.get(\"window\").width;\n  const windowHeight = Dimensions.get(\"window\").height;\n\n  const camera = new THREE.PerspectiveCamera(\n    75,\n    gl.drawingBufferWidth / gl.drawingBufferHeight,\n    0.1,\n    1000\n  );\n\n  const renderer = new ExpoTHREE.Renderer(gl);\n  renderer.setSize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n  const asset = Asset.fromModule(require(\"./models/eyeball/eyeball.obj\"));\n\n  async function asyncCall() {\n    await asset.downloadAsync();\n    const loader = new OBJLoader();\n    const material = new THREE.MeshBasicMaterial((color: 0x00ff00));\n    loader.setMaterials(material);\n    loader.load(asset.localUri, function (object) {\n      scene.add(object);\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}