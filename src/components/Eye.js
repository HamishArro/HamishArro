/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useThree } from "@react-three/fiber";
import * as THREE from "three";

export default function Eye(props) {
  const group = useRef();
  const { camera } = useThree();
  var raycaster = new THREE.Raycaster();
  var plane = new THREE.Plane(new THREE.Vector3(0, 0, 1), -10);
  var pointOfIntersection = new THREE.Vector3();

  useEffect(() => {
    animate();
  });

  const animate = () => {
    var eye = group.current.children[0];
    console.log(raycaster);
    raycaster.setFromCamera(props.coords, camera);
    console.log(raycaster);
    console.log(props.coords);
    console.log(pointOfIntersection);
    console.log(plane);
    raycaster.ray.intersectPlane(plane, pointOfIntersection);
    console.log(pointOfIntersection);
    eye.lookAt(new THREE.Vector3(1, 1, 1));
  };

  const { nodes, materials } = useGLTF("/eye/eye.glb");
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.eye_low001.geometry}
        material={materials.Eye_material}
      />
    </group>
  );
}

useGLTF.preload("eye/eye.glb");
